// ======================= ·
// C-BUTTON
// Todos los botones, sin grupo
// ======================= ·

.c-button {
  @include display-inline-flex;
  @include align-items(center);
  transition: $transitions-duration;
  justify-content: center;
  text-align: center;
  border-radius: 3px;
  border: 1px solid transparent;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  touch-action: manipulation;
  line-height: 1.5;
  cursor: pointer;
  font-weight: 400;
  color: white;
  // Por defecto tiene los tamaños del `md`
  padding: map_get( map_get($c-buttons-sizes, md) , padding );
  font-size: map_get( map_get($c-buttons-sizes, md) , font-size );
  height: map_get( map_get($c-buttons-sizes, md) , height );
  min-width: map_get( map_get($c-buttons-sizes, md) , min-width );
  @include bem-modifier(square) {
    min-width: map_get( map_get($c-buttons-sizes, md) , height );
    width: map_get( map_get($c-buttons-sizes, md) , height );
    padding: 3px;
  }
  & > *:not(:first-child) {
    margin-left: $sizesx;
  }
  @include rtl {
    & > *:not(:first-child) {
      margin-left: 0;
      margin-right: $sizesx;
    }
  }
  @include action-states {
    color: white;
    text-decoration: none;
  }
  // Cambios de forma --------------
  // Tamaños
  @at-root .c-button--md, .c-button-group--md .c-button {
    padding: map_get( map_get($c-buttons-sizes, md) , padding );
    font-size: map_get( map_get($c-buttons-sizes, md) , font-size );
    height: map_get( map_get($c-buttons-sizes, md) , height );
    min-width: map_get( map_get($c-buttons-sizes, md) , min-width );
    &.c-button--square {
      min-width: map_get( map_get($c-buttons-sizes, md) , height );
      width: map_get( map_get($c-buttons-sizes, md) , height );
    }
  }
  @at-root .c-button--xs, .c-button-group--xs .c-button {
    padding: map_get(map_get($c-buttons-sizes, xs), padding);
    font-size: map_get(map_get($c-buttons-sizes, xs), font-size);
    height: map_get(map_get($c-buttons-sizes, xs), height);
    min-width: map_get(map_get($c-buttons-sizes, xs), min-width);
    &.c-button--square {
      min-width: map_get(map_get($c-buttons-sizes, xs), height);
      width: map_get(map_get($c-buttons-sizes, xs), height);
    }
  }
  @at-root .c-button--sm, .c-button-group--sm .c-button {
    padding: map_get( map_get($c-buttons-sizes, sm) , padding );
    font-size: map_get( map_get($c-buttons-sizes, sm) , font-size );
    height: map_get( map_get($c-buttons-sizes, sm) , height );
    min-width: map_get( map_get($c-buttons-sizes, sm) , min-width );
    &.c-button--square {
      min-width: map_get( map_get($c-buttons-sizes, sm) , height );
      width: map_get( map_get($c-buttons-sizes, sm) , height );
    }
  }
  @at-root .c-button--lg, .c-button-group--lg .c-button {
    padding: map_get( map_get($c-buttons-sizes, lg) , padding );
    font-size: map_get( map_get($c-buttons-sizes, lg) , font-size );
    height: map_get( map_get($c-buttons-sizes, lg) , height );
    min-width: map_get( map_get($c-buttons-sizes, lg) , min-width );
    &.c-button--square {
      min-width: map_get( map_get($c-buttons-sizes, lg) , height );
      width: map_get( map_get($c-buttons-sizes, lg) , height );
    }
  }
  // Anular al min-witdh
  @at-root .c-button--free-width{
    min-width: auto;
  }
  @include bem-modifier( circle ) {
    border-radius: 1000px;
  }
  @include bem-modifier( block ) {
    width: 100%;
  }

  // Cambios de estilo --------------
  // Colores Genéricos
  @each $name, $color in $c-buttons-colors {
    @include bem-modifier(solid--#{$name}) {
      background-color: $color;
      @if $name == 'default' {
        color: $dark-gray;
        @include action-states {
          color: $darker-gray;
          background-color: mix(black, $color, 5%);
          outline: none;
        }
      }
      @else {
        @include action-states {
          background-color: mix(black, $color, 10%);
        }
      }
    }
  }
  // Linia
  @each $name, $color in $c-buttons-colors {
    @include bem-modifier(line--#{$name}) {
      background-color: white;
      border: 1px solid $color;
      @if $name == 'default' {
        color: $dark-gray;
        @include action-states {
          color: $darker-gray;
          background-color: mix(black, $color, 5%);
        }
      }
      @else {
        color: $color;
        @include action-states {
          background-color: $color;
        }
      }
    }
  }
  @include bem-modifier(line--white){
    background-color: transparent;
    border: 1px solid white;
    color: white;
    @include action-states {
      background-color: white;
      color: $darkest-gray;
    }
  }
  // Light
  &[class*="c-button--light"] {
    background-color: white;
    color: $dark-gray;
    border-color: $lighter-gray;
  }
  @each $name, $color in $c-buttons-colors {
    @include bem-modifier(light--#{$name}) {
      @include action-states {
        background-color: $color;
        border-color: transparent;
      }
      @if $name == default {
        @include action-states {
          color: $darker-gray;
        }
      }
      @else {
        @include action-states {
          color: white;
        }
      }
    }
  }
  // Dark
  &[class*="c-button--dark"] {
    background-color: $darker-gray;
    color: white;
  }
  @each $name, $color in $c-buttons-colors {
    @include bem-modifier(dark--#{$name}) {
      @include action-states {
        background-color: $color;
      }
      @if $name == default {
        @include action-states {
          color: $darker-gray;
        }
      }
      @else {
        @include action-states {
          color: white;
        }
      }
    }
  }

  // Opciones de responsive para los botones
  @each $keyname , $size in $s-mobile-grid-breakpoints {
    @include respond-to($size) {

      // Tamaños --------------
      @at-root .c-button--md\@#{$keyname}, .c-button-group--md\@#{$keyname} .c-button {
        padding: map_get( map_get($c-buttons-sizes, md) , padding );
        font-size: map_get( map_get($c-buttons-sizes, md) , font-size );
        height: map_get( map_get($c-buttons-sizes, md) , height );
        &:not(.c-button--free-width){
          min-width: map_get( map_get($c-buttons-sizes, md) , min-width );
        }
        &.c-button--square {
          padding: 3px;
          min-width: auto;
          width: map_get( map_get($c-buttons-sizes, md) , height );
        }
      }
      @at-root .c-button--xs\@#{$keyname}, .c-button-group--xs\@#{$keyname} .c-button {
        padding: map_get(map_get($c-buttons-sizes, xs), padding);
        font-size: map_get(map_get($c-buttons-sizes, xs), font-size);
        height: map_get(map_get($c-buttons-sizes, xs), height);
        &:not(.c-button--free-width) {
          min-width: map_get(map_get($c-buttons-sizes, xs), min-width);
        }

        &.c-button--square {
          padding: 3px;
          min-width: auto;
          width: map_get(map_get($c-buttons-sizes, xs), height);
        }
      }
      @at-root .c-button--sm\@#{$keyname}, .c-button-group--sm\@#{$keyname} .c-button {
        padding: map_get( map_get($c-buttons-sizes, sm) , padding );
        font-size: map_get( map_get($c-buttons-sizes, sm) , font-size );
        height: map_get( map_get($c-buttons-sizes, sm) , height );
        &:not(.c-button--free-width){
          min-width: map_get( map_get($c-buttons-sizes, sm) , min-width );
        }
        &.c-button--square {
          padding: 3px;
          min-width: auto;
          width: map_get( map_get($c-buttons-sizes, sm) , height );
        }
      }
      @at-root .c-button--lg\@#{$keyname}, .c-button-group--lg\@#{$keyname} .c-button {
        padding: map_get( map_get($c-buttons-sizes, lg) , padding );
        font-size: map_get( map_get($c-buttons-sizes, lg) , font-size );
        height: map_get( map_get($c-buttons-sizes, lg) , height );
        &:not(.c-button--free-width){
          min-width: map_get( map_get($c-buttons-sizes, lg) , min-width );
        }
        &.c-button--square {
          padding: 3px;
          min-width: auto;
          width: map_get( map_get($c-buttons-sizes, lg) , height );
        }
      }

      // Solid style --------------
      @each $name, $color in $primary-buttons-colors {
        @include bem-modifier(solid--#{$name}\@#{$keyname}){
          background-color: $color;
          border-color: transparent;
          color: white;
          @if $name == 'default' {
            color: $dark-gray;
            @include action-states {
              color: $darker-gray;
              background-color: mix(black, $color, 5%);
            }
          }
          @else {
            @include action-states {
              background-color: mix(black, $color, 10%);
              color: white;
            }
          }
        }
      }

      // Cambios de estilo --------------
      // Line
      @each $name, $color in $primary-buttons-colors {
        @include bem-modifier(line--#{$name}\@#{$keyname}){
          border: 1px solid $color;
          background-color: white;
          @if $name != 'default' {
            color: $color;
            @include action-states {
              color: white;
              background-color: $color;
            }
          }
          @else {
            color: $darker-gray;
            @include action-states {
              color: $darker-gray;
              background-color: $lighter-gray;
            }
          }
        }
      }
      // Line --> Only white
      @include bem-modifier(line--white\@#{$keyname}){
        border: 1px solid white;
        background: transparent;
        color: white;
        @include action-states {
          color: $darker-gray;
          background-color: white;
        }
      }
    }
  }
}